// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication.Models;

namespace WebApplication.Migrations
{
    [DbContext(typeof(DiabetesSystem2Context))]
    [Migration("20200528210321_typechange")]
    partial class typechange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApplication.Models.Answers", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AnswerID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("QuestionId")
                        .HasColumnName("QuestionID")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("WebApplication.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("WebApplication.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebApplication.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CategoryID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("WebApplication.Models.Certificates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("DoctorId")
                        .HasColumnName("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("WebApplication.Models.Chat", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ChatID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("WebApplication.Models.ChecksUps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CheckupType")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("PatientId")
                        .HasColumnName("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("ResultData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("ChecksUps");
                });

            modelBuilder.Entity("WebApplication.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnName("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("ValidationStatus")
                        .HasColumnType("bit");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("WebApplication.Models.DrugPatient", b =>
                {
                    b.Property<int>("DrugId")
                        .HasColumnName("DrugID")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnName("PatientID")
                        .HasColumnType("int");

                    b.Property<int?>("Dosage")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("DrugId", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("Drug_Patient");
                });

            modelBuilder.Entity("WebApplication.Models.Drugs", b =>
                {
                    b.Property<int>("DrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DrugID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DosageType")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("DrugName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ImageSource")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("DrugId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("WebApplication.Models.Msg", b =>
                {
                    b.Property<int>("MsgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MsgID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId")
                        .HasColumnName("ChatID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("MsgContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("MsgId");

                    b.HasIndex("UserId");

                    b.ToTable("Msg");
                });

            modelBuilder.Entity("WebApplication.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("NotificationContent")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("Type")
                        .HasColumnType("smallint");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("WebApplication.Models.NotificationAnswer", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnName("NotificationID")
                        .HasColumnType("int");

                    b.Property<int>("AnswerId")
                        .HasColumnName("AnswerID")
                        .HasColumnType("int");

                    b.HasKey("NotificationId")
                        .HasName("PK_Notification_Answer_1");

                    b.HasIndex("AnswerId");

                    b.ToTable("Notification_Answer");
                });

            modelBuilder.Entity("WebApplication.Models.NotificationAsked", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnName("NotificationID")
                        .HasColumnType("int");

                    b.Property<int>("MentionId")
                        .HasColumnName("MentionID")
                        .HasColumnType("int");

                    b.HasKey("NotificationId")
                        .HasName("PK_Notification_Asked_1");

                    b.HasIndex("MentionId");

                    b.ToTable("Notification_Asked");
                });

            modelBuilder.Entity("WebApplication.Models.NotificationFollow", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnName("NotificationID")
                        .HasColumnType("int");

                    b.Property<int>("FollowId")
                        .HasColumnName("FollowID")
                        .HasColumnType("int");

                    b.HasKey("NotificationId")
                        .HasName("PK_Notification_Follow_1");

                    b.ToTable("Notification_Follow");

                    b.HasComment("notify Doctor when a patient follows him");
                });

            modelBuilder.Entity("WebApplication.Models.NotificationMedicalInfo", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnName("NotificationID")
                        .HasColumnType("int");

                    b.Property<int>("MedicalInfoId")
                        .HasColumnName("MedicalInfoID")
                        .HasColumnType("int");

                    b.HasKey("NotificationId")
                        .HasName("PK_Notification_MedicalInfo_1");

                    b.HasIndex("MedicalInfoId");

                    b.ToTable("Notification_MedicalInfo");

                    b.HasComment("Notify Patient that a doctor requested Medicalinfo");
                });

            modelBuilder.Entity("WebApplication.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnName("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Gender")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<short?>("Height")
                        .HasColumnName("height")
                        .HasColumnType("smallint");

                    b.Property<short?>("LifeStyle")
                        .HasColumnType("smallint");

                    b.Property<short?>("MedicalCondetion")
                        .HasColumnType("smallint");

                    b.Property<short?>("Points")
                        .HasColumnType("smallint");

                    b.Property<short?>("Weight")
                        .HasColumnType("smallint");

                    b.HasKey("PatientId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("WebApplication.Models.PatientDoctorsFollow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("AccessMedicalInfo")
                        .HasColumnName("Access_MedicalInfo")
                        .HasColumnType("smallint");

                    b.Property<int?>("DoctorId")
                        .HasColumnName("DoctorID")
                        .HasColumnType("int");

                    b.Property<int?>("PatienId")
                        .HasColumnName("PatienID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatienId");

                    b.ToTable("Patient_Doctors(follow)");
                });

            modelBuilder.Entity("WebApplication.Models.Posts", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PostID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ImageSource")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PostContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ReactionId")
                        .HasColumnName("ReactionID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReactionId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("WebApplication.Models.QuestionDoctorsMention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DoctorId")
                        .HasColumnName("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnName("QuestionID")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasComment("IF the questions is answered or not");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Question_Doctors(Mention)");
                });

            modelBuilder.Entity("WebApplication.Models.Questions", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QuestionID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("WebApplication.Models.Reactions", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReactionID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReactionName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ReactionId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("WebApplication.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Medication")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientId")
                        .HasColumnName("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<short>("Type")
                        .HasColumnType("smallint")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("WebApplication.Models.UserSavedPosts", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnName("PostID")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("User_SavedPosts");
                });

            modelBuilder.Entity("WebApplication.Models.UserSavedQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnName("QuestionID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("QuestionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("User_SavedQuestion");
                });

            modelBuilder.Entity("WebApplication.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Type")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.HasIndex("ID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("WebApplication.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("WebApplication.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.Answers", b =>
                {
                    b.HasOne("WebApplication.Models.Questions", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_Answers_Questions");

                    b.HasOne("WebApplication.Models.Users", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Answers_Users");
                });

            modelBuilder.Entity("WebApplication.Models.Certificates", b =>
                {
                    b.HasOne("WebApplication.Models.Doctor", "Doctor")
                        .WithMany("Certificates")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_Certificates_Doctor")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.Chat", b =>
                {
                    b.HasOne("WebApplication.Models.Msg", "ChatNavigation")
                        .WithMany("Chat")
                        .HasForeignKey("ChatId")
                        .HasConstraintName("FK_Chat_Msg")
                        .IsRequired();

                    b.HasOne("WebApplication.Models.Users", "User")
                        .WithMany("Chat")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Chat_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.ChecksUps", b =>
                {
                    b.HasOne("WebApplication.Models.Patient", "Patient")
                        .WithMany("ChecksUps")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_ChecksUps_Patient1");
                });

            modelBuilder.Entity("WebApplication.Models.Doctor", b =>
                {
                    b.HasOne("WebApplication.Models.Users", "DoctorNavigation")
                        .WithOne("Doctor")
                        .HasForeignKey("WebApplication.Models.Doctor", "DoctorId")
                        .HasConstraintName("FK_Doctor_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.DrugPatient", b =>
                {
                    b.HasOne("WebApplication.Models.Drugs", "Drug")
                        .WithMany("DrugPatient")
                        .HasForeignKey("DrugId")
                        .HasConstraintName("FK_Drug_Patient_Drugs")
                        .IsRequired();

                    b.HasOne("WebApplication.Models.Patient", "Patient")
                        .WithMany("DrugPatient")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Drug_Patient_Patient1")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.Msg", b =>
                {
                    b.HasOne("WebApplication.Models.Users", "User")
                        .WithMany("Msg")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Msg_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.NotificationAnswer", b =>
                {
                    b.HasOne("WebApplication.Models.Answers", "Answer")
                        .WithMany("NotificationAnswer")
                        .HasForeignKey("AnswerId")
                        .HasConstraintName("FK_Notification_Answer_Answers")
                        .IsRequired();

                    b.HasOne("WebApplication.Models.Notification", "Notification")
                        .WithOne("NotificationAnswer")
                        .HasForeignKey("WebApplication.Models.NotificationAnswer", "NotificationId")
                        .HasConstraintName("FK_Notification_Answer_Notification")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.NotificationAsked", b =>
                {
                    b.HasOne("WebApplication.Models.QuestionDoctorsMention", "Mention")
                        .WithMany("NotificationAsked")
                        .HasForeignKey("MentionId")
                        .HasConstraintName("FK_Notification_Asked_Question_Doctors(Mention)")
                        .IsRequired();

                    b.HasOne("WebApplication.Models.Notification", "Notification")
                        .WithOne("NotificationAsked")
                        .HasForeignKey("WebApplication.Models.NotificationAsked", "NotificationId")
                        .HasConstraintName("FK_Notification_Asked_Notification")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.NotificationFollow", b =>
                {
                    b.HasOne("WebApplication.Models.Notification", "Notification")
                        .WithOne("NotificationFollow")
                        .HasForeignKey("WebApplication.Models.NotificationFollow", "NotificationId")
                        .HasConstraintName("FK_Notification_Follow_Notification")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.NotificationMedicalInfo", b =>
                {
                    b.HasOne("WebApplication.Models.PatientDoctorsFollow", "MedicalInfo")
                        .WithMany("NotificationMedicalInfo")
                        .HasForeignKey("MedicalInfoId")
                        .HasConstraintName("FK_Notification_MedicalInfo_Patient_Doctors(follow)")
                        .IsRequired();

                    b.HasOne("WebApplication.Models.Notification", "Notification")
                        .WithOne("NotificationMedicalInfo")
                        .HasForeignKey("WebApplication.Models.NotificationMedicalInfo", "NotificationId")
                        .HasConstraintName("FK_Notification_MedicalInfo_Notification")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.Patient", b =>
                {
                    b.HasOne("WebApplication.Models.Users", "PatientNavigation")
                        .WithOne("Patient")
                        .HasForeignKey("WebApplication.Models.Patient", "PatientId")
                        .HasConstraintName("FK_Patient_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.PatientDoctorsFollow", b =>
                {
                    b.HasOne("WebApplication.Models.Doctor", "Doctor")
                        .WithMany("PatientDoctorsFollow")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_Patient_Doctors_Doctor");

                    b.HasOne("WebApplication.Models.Patient", "Patien")
                        .WithMany("PatientDoctorsFollow")
                        .HasForeignKey("PatienId")
                        .HasConstraintName("FK_Patient_Doctors_Patient");
                });

            modelBuilder.Entity("WebApplication.Models.Posts", b =>
                {
                    b.HasOne("WebApplication.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Posts_Category")
                        .IsRequired();

                    b.HasOne("WebApplication.Models.Users", "Post")
                        .WithOne("Posts")
                        .HasForeignKey("WebApplication.Models.Posts", "PostId")
                        .HasConstraintName("FK_Posts_Users")
                        .IsRequired();

                    b.HasOne("WebApplication.Models.Reactions", "Reaction")
                        .WithMany("Posts")
                        .HasForeignKey("ReactionId")
                        .HasConstraintName("FK_Posts_Reactions");
                });

            modelBuilder.Entity("WebApplication.Models.QuestionDoctorsMention", b =>
                {
                    b.HasOne("WebApplication.Models.Doctor", "Doctor")
                        .WithMany("QuestionDoctorsMention")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_Question_Doctors_Doctor")
                        .IsRequired();

                    b.HasOne("WebApplication.Models.Questions", "Question")
                        .WithMany("QuestionDoctorsMention")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_Question_Doctors_Questions")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.Questions", b =>
                {
                    b.HasOne("WebApplication.Models.Users", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Questions_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.Test", b =>
                {
                    b.HasOne("WebApplication.Models.Patient", "Patient")
                        .WithMany("Test")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Test_Patient");
                });

            modelBuilder.Entity("WebApplication.Models.UserSavedPosts", b =>
                {
                    b.HasOne("WebApplication.Models.Posts", "Post")
                        .WithMany("UserSavedPosts")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_User_SavedPosts_Posts")
                        .IsRequired();

                    b.HasOne("WebApplication.Models.Users", "User")
                        .WithMany("UserSavedPosts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_User_SavedPosts_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.UserSavedQuestion", b =>
                {
                    b.HasOne("WebApplication.Models.Questions", "Question")
                        .WithMany("UserSavedQuestion")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_User_SavedQuestion_Questions")
                        .IsRequired();

                    b.HasOne("WebApplication.Models.Users", "User")
                        .WithMany("UserSavedQuestion")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_User_SavedQuestion_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.Users", b =>
                {
                    b.HasOne("WebApplication.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
